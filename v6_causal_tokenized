# %%
import numpy as np
import torch 
import matplotlib.pyplot as plt

# %%
class Mesh:
  def __init__(self, edges: torch.Tensor):
    self.edges = edges
    self.edge_lens = torch.norm(edges[:,0] - edges[:,1], dim=1)
  
  def loop(vertices):
    edges = torch.cat([vertices[:-1], vertices[1:]],dim=1).reshape(-1, 2, 2)
    return Mesh(edges)
  
  def plot(self, c='b'):
    for edge in self.edges:
      plt.plot(*edge.T, c)
    
  def pointcloud(self,n=1000,std = 0.01):
    edges_probs = self.edge_lens/self.edge_lens.sum()
    edges = torch.multinomial(edges_probs, n, replacement=True)
    edges = self.edges[edges]
    t = torch.rand(n)
    points = edges[:,0] + t[:,None]*(edges[:,1]-edges[:,0])
    noise = torch.randn_like(points)*std
    return points + noise
  
box = Mesh.loop(torch.tensor([[0, 0], [0, 1], [1, 1],[1,0], [0,0]],dtype=torch.float32))
box.plot()
# %%
def random_shape():
  n = np.random.randint(3, 10)
  corners = []

  for i in range(n):
    angle = 2*np.pi*i/n + np.random.rand()*0.1
    r = np.random.rand() * 0.5 + 0.5
    corners.append(torch.tensor([np.cos(angle)*r, np.sin(angle)*r],dtype=torch.float32))

  verts = []
  corner_dir = np.random.randint(2)
  for i in range(n + 1):
    verts.append(corners[i % n])
    verts.append(torch.tensor([corners[(i+corner_dir) % n][0] , corners[(i + 1 - corner_dir) % n][1]]))

  return Mesh.loop(torch.stack(verts[:-1]))


shape = random_shape()
shape.plot()
v = shape.pointcloud(200)
plt.scatter(*v.T)

# %%

# def gen_data(n,t):
#   train_shapes = [random_shape() for _ in range(n)]
#   x = [s.pointcloud(100) for s in train_shapes]
#   y = [s.edges for s in train_shapes]
#   x = torch.stack(x)
#   maxverts = 18
#   y = [torch.cat([y.reshape(-1,4), torch.ones(len(y), 1)], dim=1) for y in y]
#   y = torch.stack([torch.cat([y, torch.zeros(maxverts - len(y), 5)]) for y in y])
#   s = torch.randn(n, 18, 5) 
#   s[:,:,4] = s[:,:,4].sigmoid()
#   s = y * t + s * (1-t)    
#   s = torch.cat([s, torch.ones(n, 18, 1)*t], dim=2)
#   return x, s, y


# x,s,y = gen_data(10,.3)
# k = 0

# edges = y[k].reshape(-1,5)[:,:4].reshape( 18, 2, 2)
# pmask = y[k].reshape(-1,5)[:,4].reshape( 18, 1)
# for edge in edges: plt.plot(*edge.T, c='black')

# sedges = s[k].reshape(-1,6)[:,:4].reshape( 18, 2, 2)
# smask = s[k].reshape(-1,6)[:,4].reshape( 18, 1)
# for edge,m in zip(sedges,smask): plt.plot(*edge.T, c=plt.colormaps['Blues'](m.item()))


# %%



